plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id "com.diffplug.spotless" version "6.25.0"
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

group = 'de.datenente'
version = '1.0.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.5-R0.1-SNAPSHOT")

    // Lombok
    compileOnly("org.projectlombok:lombok:1.18.38")
    annotationProcessor("org.projectlombok:lombok:1.18.38")

    testCompileOnly("org.projectlombok:lombok:1.18.38")
    testAnnotationProcessor("org.projectlombok:lombok:1.18.38")

    // Hibernate
    implementation("org.hibernate.orm:hibernate-core:6.6.0.Final")
    implementation("org.mariadb.jdbc:mariadb-java-client:3.4.1")
    implementation("io.hypersistence:hypersistence-utils-hibernate-63:3.8.2")
    implementation("jakarta.persistence:jakarta.persistence-api:3.2.0")
}

shadowJar {
    // archiveFileName.set("${project.name}-${version}-shadow.jar")
    archiveFileName.set("${project.name}-paper.jar")
    configurations = [
        project.configurations.runtimeClasspath,
        project.configurations.shadow
    ]
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21")
    }
    build {
        dependsOn(spotlessApply)
        dependsOn(shadowJar)
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

spotless {
    groovyGradle {
        target fileTree(".") {
            include("**/*.gradle")
            exclude("**/build/**", "**/build-*/**")
        }
        greclipse()
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
    format "misc", {
        target fileTree(".") {
            include("**/*.md", "**/.gitignore", "LICENSE_HEADER", "**/*.yaml", "**/*.yml", "**/*.json")
            exclude("**/build/**", "**/build-*/**")
        }
        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
    java {
        target fileTree(".") {
            include("**/*.java")
            exclude("**/build/**", "**/build-*/**")
        }
        toggleOffOn()
        palantirJavaFormat()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
        importOrder()
        formatAnnotations()

        licenseHeaderFile(rootProject.file("LICENSE_HEADER"))
    }
}
